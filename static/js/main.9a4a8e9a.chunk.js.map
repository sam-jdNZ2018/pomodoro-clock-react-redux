{"version":3,"sources":["cmps/setting-changer.js","cmps/pomodoro.js","serviceWorker.js","index.js"],"names":["SettingChanger","props","react_default","a","createElement","class","id","sname","style","labelColor","charAt","toUpperCase","slice","visible","type","onClick","changer","className","setting","INITIAL_STATE","status","time_type","time_left","break_length","session_length","RESET","BREAK_CHANGE","SESS_CHANGE","TICK","SWITCH","store","createStore","state","arguments","length","undefined","action","new_break","change","new_session","Pomodoro","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","getClockTime","bind","assertThisInitialized","changeBreak","changeSession","startStop","reset","audio","React","createRef","seconds","Math","floor","toString","padStart","value","changeBreakLength","changeSessionLength","current","load","promise","play","then","_","catch","error","switch","setInterval","clockTick","clearInterval","pause","currentTime","symbol","canChange","visibility","statusColor","clockRimStyle","borderColor","headColor","color","breakLabelColor","sessLabelColor","ref","src","setting_changer","Component","PomodoroContainer","connect","dispatch","ClockWrapper","es","Boolean","window","location","hostname","match","ReactDOM","render","pomodoro","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a4a8e9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SettingChanger = props => {\r\n    return (\r\n       <div class=\"setting-cont\">\r\n         <div id={props.sname + \"-label\"} style={props.labelColor}>{props.sname.charAt(0).toUpperCase() + props.sname.slice(1)} Length </div>\r\n         <div class=\"setting-inner\">\r\n           <button id={props.sname + \"-decrement\"} style={props.visible} type=\"button\" onClick={()=>props.changer(-1)} ><i className=\"fas fa-minus\"></i></button>\r\n           <label id={props.sname + \"-length\"} style={props.labelColor}> {props.setting}</label>\r\n           <button id={props.sname + \"-increment\"} style={props.visible} type=\"button\" onClick={()=>props.changer(1)} ><i className=\"fas fa-plus\"></i></button>\r\n         </div>\r\n       </div>\r\n    );\r\n  };\r\n\r\nexport default SettingChanger;","import React from 'react';\nimport { Provider, connect } from 'react-redux'\nimport { createStore } from 'redux'\nimport SettingChanger from './setting-changer';\n\nconst SESSION = \"SESSION\";\nconst BREAK = \"BREAK\";\nconst INITIAL_STATE = {status: \"\",time_type: SESSION, time_left: 25 * 60, break_length: 5, session_length: 25};\nconst BEEP = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/success.mp3\";\n\nconst RESET = \"RESET\";\nconst BREAK_CHANGE = \"BREAK_CHANGE\";\nconst SESS_CHANGE = \"SESS_CHANGE\";\nconst TICK = \"TICK\";\nconst SWITCH = \"SWITCH\";\n\nfunction breakChangeActioner(change_value){\n  return {type: BREAK_CHANGE, change: change_value}\n}\n\nfunction sessChangeActioner(change_value){\n  return {type: SESS_CHANGE, change: change_value}\n}\n\nfunction switchStatusActioner(){\n  return {type: SWITCH};  \n}\n\nfunction tickActioner(){\n  return {type: TICK};\n}\n\nfunction resetActioner(){\n  return {type: RESET};  \n}\n\nconst clockReducer = (state = INITIAL_STATE, action) => {\n  switch(action.type){\n    case BREAK_CHANGE:\n      let new_break = state.break_length + action.change;\n      if(new_break > 0 && new_break <= 60){\n        return {status: state.status, time_type : state.time_type, time_left : state.time_left, break_length : new_break, session_length: state.session_length};\n      }\n      return state;\n    case SESS_CHANGE:\n      let new_session = state.session_length + action.change;\n      if(new_session > 0 && new_session <= 60){\n        return {status: state.status, time_type : state.time_type, time_left : new_session * 60, break_length : state.break_length, session_length: new_session};\n      }\n      return state;\n    case SWITCH:\n      if(state.status == \"\" || state.status == \"paused\"){\n        return {status: \"playing\", time_type : state.time_type, time_left : state.time_left, break_length : state.break_length, session_length: state.session_length};\n      }\n      else{\n        return {status: \"paused\", time_type : state.time_type, time_left : state.time_left, break_length : state.break_length, session_length: state.session_length};\n      }\n    case TICK:\n      if(state.time_left == 0){\n        if(state.time_type == SESSION){\n          return{status: state.status, time_type: BREAK, time_left: state.break_length * 60, break_length: state.break_length, session_length: state.session_length};\n        }\n        else{\n          return {status: state.status, time_type: SESSION, time_left: state.session_length * 60, break_length: state.break_length, session_length: state.session_length};\n        }\n      }\n      else{\n        return {status: state.status, time_type: state.time_type, time_left: state.time_left - 1, break_length: state.break_length, session_length: state.session_length};\n      }\n    case RESET:\n      return INITIAL_STATE;\n    default: \n      return state;\n  }\n}\n\nfunction mapStateToProps(state){\n  return {status: state.status, time_type: state.time_type, time_left: state.time_left, break_length: state.break_length, session_length: state.session_length};\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    changeBreakLength: function(change){\n      dispatch(breakChangeActioner(change));\n    },\n    changeSessionLength: function(change){\n      dispatch(sessChangeActioner(change));\n    },\n    switch: function(){\n      dispatch(switchStatusActioner());\n    },\n    clockTick: function(){\n      dispatch(tickActioner());\n    },\n    reset: function(){\n      dispatch(resetActioner());\n    }\n  };\n}\n\nconst store = createStore(clockReducer);\n\nclass Pomodoro extends React.Component{\n constructor(props){\n   super(props);\n   this.timer = \"\";\n   this.getClockTime = this.getClockTime.bind(this);\n   this.changeBreak = this.changeBreak.bind(this);\n   this.changeSession = this.changeSession.bind(this);\n   this.startStop= this.startStop.bind(this);\n   this.reset = this.reset.bind(this);\n   this.audio = React.createRef();\n } \n  \n  //Convert an amount of seconds into the minutes/seconds format to display on a clock\n  getClockTime(seconds){\n    let min = (Math.floor(seconds/60)).toString().padStart(2,\"0\");\n    let sec = (seconds%60).toString().padStart(2,\"0\");\n    return min + \":\" + sec; \n  }\n  \n  //Change the value of the break length by the value provided\n  changeBreak(value){\n     this.props.changeBreakLength(value);\n  }\n  \n  //Change the value of the session length by the value provided\n  changeSession(value){\n   this.props.changeSessionLength(value);\n  }\n    \n  //Start the timer if it ic currently stopped or stop it of it is currently ticking\n  startStop(){\n    //Code between comments is for ensuring asynchronous tests pass\n    this.audio.current.load();\n  // this.audio.current.volume = 0.00; \n     let promise = this.audio.current.play();\n    if (promise !== undefined) {\n      promise.then(_ => {\n      }).catch(error => {\n      })\n    }\n    //this.audio.current.volume = 1.0;\n    //\n    if(this.timer == \"\"){\n      this.props.switch();\n      this.timer = setInterval(this.props.clockTick,1000);\n    }\n    else{\n      this.props.switch();\n      clearInterval(this.timer);\n      this.timer = \"\";\n    }\n  }\n  \n  //Reset the time left, break length and session length parameters to their initial states\n  reset(){\n    this.audio.current.pause();\n    this.audio.current.currentTime = 0;\n    if(this.timer != \"\"){\n      clearInterval(this.timer); \n      this.timer = \"\";\n    }\n    this.props.reset();\n  }\n  \n  render(){\n    let symbol = \"fas fa-play\"; //If the play or stop icon is to be displayed\n    let symbColor = {color: \"#66ff66\"};\n    let canChange = {visibility: \"visible\"}; // If the plus/minus icons for the break/session length are visible\n    let statusColor = \"white\";\n    if(this.props.status != \"\"){\n      canChange.visibility = \"hidden\";\n    }\n    if(this.props.status == \"playing\"){\n      symbol = \"fas fa-pause\";\n      statusColor = \"#66ff66\";\n      symbColor.color = \"red\";\n    }\n    if (this.props.status == \"paused\"){\n      statusColor = \"red\";\n    }\n    let clockRimStyle = {borderColor: statusColor};\n    let headColor = {color: statusColor};\n    \n    let breakLabelColor = {color: \"white\"};\n    let sessLabelColor = {color: \"white\"};\n    if(this.props.status != \"\" && this.props.time_type == SESSION){\n      sessLabelColor.color = statusColor;\n    }\n    else if (this.props.status != \"\" && this.props.time_type == BREAK){\n      breakLabelColor.color = statusColor;\n    }\n return(\n <div id=\"clock-outer\">\n   <h1>Pomodoro Clock</h1>\n   <audio ref={this.audio} id=\"beep\" src={BEEP}/>\n   <div id=\"center\">\n     <SettingChanger sname=\"break\" setting={this.props.break_length} changer={this.changeBreak} visible={canChange} labelColor={breakLabelColor}/>\n     <div id=\"timer-cont\">\n       <div id=\"time-center\" style={clockRimStyle}><h2 id=\"timer-label\" style={headColor}>{this.props.time_type}</h2><span id=\"time-left\">{this.getClockTime(this.props.time_left)}</span></div>\n     </div>\n     <SettingChanger sname=\"session\" setting={this.props.session_length} changer={this.changeSession} visible={canChange} labelColor={sessLabelColor}/>\n   </div>\n   <div id=\"clock-functions-cont\">\n     <button id=\"start_stop\"  type=\"button\" onClick={this.startStop}><i className={symbol}></i></button>\n     <button id=\"reset\" type=\"button\" onClick={this.reset}><i className=\"fas fa-redo\"></i></button>\n   </div>\n</div>);\n  }\n}\n\nconst PomodoroContainer = connect(mapStateToProps, mapDispatchToProps)(Pomodoro);\n\nclass ClockWrapper extends React.Component{\n  render(){\n    return(\n      <Provider store={store}>\n        <PomodoroContainer/>\n      </Provider>\n    );\n  }\n}\n\nexport default ClockWrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport ClockWrapper from './cmps/pomodoro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ClockWrapper />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}